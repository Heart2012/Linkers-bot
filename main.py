import os
import asyncio
from datetime import datetime, date, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# -------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ --------------------
API_TOKEN = os.getenv("API_TOKEN")  # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
OUTPUT_CHANNEL_ID = int(os.getenv("OUTPUT_CHANNEL_ID"))  # –∫—É–¥–∞ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å—Å—ã–ª–∫–∏
SERVICE_ACCOUNT_FILE = "service_account.json"  # JSON –∫–ª—é—á Google
SHEET_NAME = "TelegramBotStats"  # –∏–º—è Google —Ç–∞–±–ª–∏—Ü—ã

# –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ (ID: –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è)
CHANNELS = {
    -1003039408421: "–ö–∏—ó–≤/–æ–±–ª.",
    -1002851410256: "–•–∞—Ä–∫—ñ–≤/–æ–±–ª.",
    -1003012571542: "–õ—å–≤—ñ–≤/–æ–±–ª.",
    -1002969968192: "–í—ñ–Ω–Ω–∏—Ü—è/–æ–±–ª.",
    -1002924468168: "–î–Ω—ñ–ø—Ä–æ/–æ–±–ª.",
    -1003021264692: "–ó–∞–ø–æ—Ä—ñ–∂–∂—è/–æ–±–ª.",
    -1002996278961: "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫/–æ–±–ª.",
    -1003006964132: "–†—ñ–≤–Ω–µ/–æ–±–ª.",
    -1002945091264: "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π/–æ–±–ª.",
    -1002341809057: "–û–¥–µ—Å–∞/–æ–±–ª.",
    -1002628002244: "–ß–µ—Ä–Ω—ñ–≥—ñ–≤/–æ–±–ª.",
    -1002966898895: "–õ—É—Ü—å–∫/–æ–±–ª."
    # –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
}

# -------------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ --------------------
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# -------------------- Google Sheets --------------------
scope = ["https://spreadsheets.google.com/feeds","https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(SERVICE_ACCOUNT_FILE, scope)
gc = gspread.authorize(creds)
sheet = gc.open(SHEET_NAME).sheet1  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç

def log_to_sheet(link_name, channel_name):
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    sheet.append_row([now, link_name, channel_name])

def generate_daily_report():
    records = sheet.get_all_records()
    today = date.today()
    yesterday = today - timedelta(days=1)
    report = {"today": {}, "yesterday": {}}

    for r in records:
        ts = datetime.strptime(r["timestamp"], "%Y-%m-%d %H:%M:%S").date()
        channel = r["channel_name"]
        if ts == today:
            report["today"][channel] = report["today"].get(channel, 0) + 1
        elif ts == yesterday:
            report["yesterday"][channel] = report["yesterday"].get(channel, 0) + 1
    return report

# -------------------- –ö–æ–º–∞–Ω–¥–∞ /newlink --------------------
@dp.message(commands=["newlink"])
async def cmd_newlink(message: types.Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.reply("‚ùå –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏. –ü—Ä–∏–º–µ—Ä: /newlink –ú–æ—è —Å—Å—ã–ª–∫–∞")
        return
    link_name = parts[1]

    links_text_list = []
    for channel_id, name in CHANNELS.items():
        try:
            invite_link = await bot.create_chat_invite_link(chat_id=channel_id, name=link_name)
            links_text_list.append(f"{name} - {invite_link.invite_link}")
            log_to_sheet(link_name, name)
        except Exception as e:
            links_text_list.append(f"{name} - ‚ùå –æ—à–∏–±–∫–∞: {e}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ 3 —Å—Å—ã–ª–∫–∏ –≤ —Ä—è–¥
    message_lines = []
    for i in range(0, len(links_text_list), 3):
        message_lines.append(" | ".join(links_text_list[i:i+3]))
    final_message = "\n".join(message_lines)

    await bot.send_message(OUTPUT_CHANNEL_ID, final_message, parse_mode=ParseMode.HTML)
    await message.reply("‚úÖ –°—Å—ã–ª–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")

# -------------------- –ö–æ–º–∞–Ω–¥–∞ /report --------------------
@dp.message(commands=["report"])
async def cmd_report(message: types.Message):
    report = generate_daily_report()
    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–∞–º:\n\n–°–µ–≥–æ–¥–Ω—è:\n"
    for ch, count in report["today"].items():
        text += f"{ch}: {count}\n"
    text += "\n–í—á–µ—Ä–∞:\n"
    for ch, count in report["yesterday"].items():
        text += f"{ch}: {count}\n"
    await message.reply(text)

# -------------------- –ó–∞–ø—É—Å–∫ --------------------
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
