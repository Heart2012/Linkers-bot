import os
import json
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage

# -------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ --------------------
API_TOKEN = os.getenv("API_TOKEN")
OUTPUT_CHANNEL_ID = int(os.getenv("OUTPUT_CHANNEL_ID"))
LINKS_FILE = "links.json"

if not API_TOKEN or not OUTPUT_CHANNEL_ID:
    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω—ã API_TOKEN –∏–ª–∏ OUTPUT_CHANNEL_ID")
    exit(1)

bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(storage=MemoryStorage())

# -------------------- –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ --------------------
CHANNELS = [
    {"name": "‚ö†Ô∏è –û–ü–ï–†–ê–¢–ò–í–ù–Ü –ù–û–í–ò–ù–ò üîû", "id": -1003039408421},
    {"name": "–ö–∏—ó–≤/–æ–±–ª.", "id": -1002851410256},
    {"name": "–•–∞—Ä–∫—ñ–≤/–æ–±–ª.", "id": -1003012571542},
    {"name": "–õ—å–≤—ñ–≤/–æ–±–ª.", "id": -1002969968192},
    {"name": "–í—ñ–Ω–Ω–∏—Ü—è/–æ–±–ª.", "id": -1002924468168},
    {"name": "–î–Ω—ñ–ø—Ä–æ/–æ–±–ª.", "id": -1003021264692},
    {"name": "–ó–∞–ø–æ—Ä—ñ–∂–∂—è/–æ–±–ª.", "id": -1002996278961},
    {"name": "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫/–æ–±–ª.", "id": -1003006964132},
    {"name": "–†—ñ–≤–Ω–µ/–æ–±–ª.", "id": -1002945091264},
    {"name": "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π/–æ–±–ª.", "id": -1002341809057},
    {"name": "–û–¥–µ—Å–∞/–æ–±–ª.", "id": -1002628002244},
    {"name": "–ß–µ—Ä–Ω—ñ–≥—ñ–≤/–æ–±–ª.", "id": -1002966898895},
    {"name": "–õ—É—Ü—å–∫/–æ–±–ª.", "id": -1002946058758},
    {"name": "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å/–æ–±–ª.", "id": -1003073607738},
    {"name": "–ß–µ—Ä–Ω—ñ–≤—Ü—ñ/–æ–±–ª.", "id": -1002990168271},
    {"name": "–£–∂–≥–æ—Ä–æ–¥/–æ–±–ª.", "id": -1002895198278},
    {"name": "–ñ–∏—Ç–æ–º–∏—Ä/–æ–±–ª.", "id": -1002915977182},
    {"name": "–ß–µ—Ä–∫–∞—Å–∏/–æ–±–ª.", "id": -1002320247065},
    {"name": "–ú–∏–∫–æ–ª–∞—ó–≤/–æ–±–ª.", "id": -1003042812683},
    {"name": "–ü–æ–ª—Ç–∞–≤–∞/–æ–±–ª.", "id": -1002792112863},
    {"name": "–°—É–º–∏/–æ–±–ª.", "id": -1002933054536},
    {"name": "–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π/–æ–±–ª.", "id": -1002968550135},
    {"name": "–•–µ—Ä—Å–æ–Ω/–æ–±–ª.", "id": -1003098702380},
    {"name": "–ö—Ä–∏–≤–∏–π –†—ñ–≥", "id": -1002816696144},
    {"name": "–ö—Ä–µ–º–µ–Ω—á—É–∫", "id": -1003060893497},
]

# -------------------- –†–∞–±–æ—Ç–∞ —Å JSON --------------------
def load_links():
    if os.path.exists(LINKS_FILE):
        with open(LINKS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_links(links):
    with open(LINKS_FILE, "w", encoding="utf-8") as f:
        json.dump(links, f, ensure_ascii=False, indent=2)

# -------------------- –ö–æ–º–∞–Ω–¥—ã --------------------
@dp.message(Command("newlink"))
async def cmd_newlink(message: types.Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏. –ü—Ä–∏–º–µ—Ä: /newlink –ö–∏—ó–≤/–æ–±–ª.")
        return
    link_name = parts[1]

    saved_links = load_links()
    created_links = []

    for ch in CHANNELS:
        try:
            invite = await bot.create_chat_invite_link(chat_id=ch["id"], name=link_name)
            created_links.append({"name": ch["name"], "url": invite.invite_link})
        except Exception as e:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è {ch['name']}: {e}")

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å—Ç–∞—Ä—ã–º —Å—Å—ã–ª–∫–∞–º
    all_links = saved_links + created_links
    save_links(all_links)

    # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
    output_lines = [f"{created_links[0]['name']} - {created_links[0]['url']}"]
    for i in range(1, len(created_links), 3):
        group = created_links[i:i+3]
        line = " | ".join([f"{item['name']} - {item['url']}" for item in group])
        output_lines.append(line)

    final_message = "\n".join(output_lines)
    await bot.send_message(OUTPUT_CHANNEL_ID, final_message)
    await message.answer("‚úÖ –í—Å–µ —Å—Å—ã–ª–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã!")

@dp.message(Command("alllinks"))
async def cmd_alllinks(message: types.Message):
    saved_links = load_links()
    if not saved_links:
        await message.answer("‚ÑπÔ∏è –°—Å—ã–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç")
        return

    output_lines = [f"{saved_links[0]['name']} - {saved_links[0]['url']}"]
    for i in range(1, len(saved_links), 3):
        group = saved_links[i:i+3]
        line = " | ".join([f"{item['name']} - {item['url']}" for item in group])
        output_lines.append(line)

    await message.answer("\n".join(output_lines))

# -------------------- –ó–∞–ø—É—Å–∫ --------------------
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling)...")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
