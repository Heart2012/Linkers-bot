import os
import json
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

# ================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==================
API_TOKEN = os.getenv("API_TOKEN")
OUTPUT_CHANNEL_ID = int(os.getenv("OUTPUT_CHANNEL_ID"))
LINKS_FILE = "links.json"

if not API_TOKEN or not OUTPUT_CHANNEL_ID:
    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω—ã API_TOKEN –∏–ª–∏ OUTPUT_CHANNEL_ID")
    exit(1)

# ================== –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ ==================
CHANNELS = [
    {"name": "‚ö†Ô∏è –û–ü–ï–†–ê–¢–ò–í–ù–Ü –ù–û–í–ò–ù–ò üîû", "id": -1003039408421},
    {"name": "–ö–∏—ó–≤/–æ–±–ª.", "id": -1002851410256},
    {"name": "–•–∞—Ä–∫—ñ–≤/–æ–±–ª.", "id": -1003012571542},
    {"name": "–õ—å–≤—ñ–≤/–æ–±–ª.", "id": -1002969968192},
    {"name": "–í—ñ–Ω–Ω–∏—Ü—è/–æ–±–ª.", "id": -1002924468168},
    {"name": "–î–Ω—ñ–ø—Ä–æ/–æ–±–ª.", "id": -1003021264692},
    {"name": "–ó–∞–ø–æ—Ä—ñ–∂–∂—è/–æ–±–ª.", "id": -1002996278961},
    {"name": "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫/–æ–±–ª.", "id": -1003006964132},
]

# ================== –†–∞–±–æ—Ç–∞ —Å JSON ==================
def load_links():
    if os.path.exists(LINKS_FILE):
        with open(LINKS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_links(links):
    with open(LINKS_FILE, "w", encoding="utf-8") as f:
        json.dump(links, f, ensure_ascii=False, indent=2)

# ================== –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ ==================
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# ================== –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥ ==================
@dp.message()
async def handle_commands(message: types.Message):
    text = message.text or ""

    # ---------------- –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ ----------------
    if text.startswith("/newlink"):
        parts = text.split(maxsplit=1)
        link_name = parts[1] if len(parts) > 1 else f"–ó–∞—è–≤–∫–∞ –≤—ñ–¥ {message.from_user.full_name}"

        created_links = []
        for ch in CHANNELS:
            try:
                invite = await bot.create_chat_invite_link(
                    chat_id=ch["id"],
                    name=link_name,
                    creates_join_request=True  # ‚ùóÔ∏è –∑–∞–∫—Ä–∏—Ç–∞ –ª—ñ–Ω–∫–∞ –∑ –∑–∞—è–≤–∫–æ—é
                )
                created_links.append({"name": ch["name"], "url": invite.invite_link})
            except Exception as e:
                created_links.append({"name": ch["name"], "url": f"‚ùå {e}"})

        save_links(created_links)

        # ---------------- –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ ----------------
        output_lines = []

        if created_links:
            # –ü–µ—Ä–≤–∞—è –æ—Ç–¥–µ–ª—å–Ω–∞—è
            first_link = created_links[0]
            output_lines.append(f"{first_link['name']} - {first_link['url']}")

            # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ —Ç—Ä–∏ –≤ —Å—Ç—Ä–æ–∫–µ —á–µ—Ä–µ–∑ |
            rest_links = created_links[1:]
            for i in range(0, len(rest_links), 3):
                group = rest_links[i:i+3]
                line = " | ".join([f"{item['name']} - {item['url']}" for item in group])
                output_lines.append(line)

        final_message = "\n".join(output_lines)
        await bot.send_message(OUTPUT_CHANNEL_ID, final_message)
        await message.answer("‚úÖ –í—Å–µ —Å—Å—ã–ª–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã!")

    # ---------------- –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ ----------------
    elif text.startswith("/alllinks"):
        saved_links = load_links()
        if not saved_links:
            await message.answer("‚ÑπÔ∏è –õ—ñ–Ω–∫—ñ–≤ —â–µ –Ω–µ–º–∞—î")
            return

        output_lines = []

        if saved_links:
            # –ü–µ—Ä–≤–∞—è –æ—Ç–¥–µ–ª—å–Ω–∞—è
            first_link = saved_links[0]
            output_lines.append(f"{first_link['name']} - {first_link['url']}")

            # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ —Ç—Ä–∏ –≤ —Å—Ç—Ä–æ–∫–µ —á–µ—Ä–µ–∑ |
            rest_links = saved_links[1:]
            for i in range(0, len(rest_links), 3):
                group = rest_links[i:i+3]
                line = " | ".join([f"{item['name']} - {item['url']}" for item in group])
                output_lines.append(line)

        await message.answer("\n".join(output_lines))

# ================== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ==================
async def main():
    # –£–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ polling
    await bot.delete_webhook(drop_pending_updates=True)
    print("Webhook —É–¥–∞–ª—ë–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º polling...")

    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
